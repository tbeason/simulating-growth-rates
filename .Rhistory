par(mar=c(3,4.5,1,1.5))
plot(model[,1],model[,3],type="l",ylab="Price",xlab="")
plot(model[,1],model[,2],type="l",col="blue",ylab="Excess Demand",xlab="")
plot(model[,1],model[,4],type="l",col="red",ylab="Utility",xlab="")
model <- SchmidtRK2(alpha=1,beta=10,gamma=1,delta=1,d=0,p=0,n0=0.4,p0=1.05,dt=0.01,N=25)
par(mfrow=c(2,2))
par(mar=c(3,4.5,1,1.5))
plot(model[,1],model[,3],type="l",ylab="Price",xlab="")
plot(model[,1],model[,2],type="l",col="blue",ylab="Excess Demand",xlab="")
plot(model[,1],model[,4],type="l",col="red",ylab="Utility",xlab="")
model <- SchmidtRK2(alpha=1,beta=1,gamma=1,delta=1,d=0,p=0,n0=0.4,p0=1.05,dt=0.01,N=25)
par(mfrow=c(2,2))
par(mar=c(3,4.5,1,1.5))
plot(model[,1],model[,3],type="l",ylab="Price",xlab="")
plot(model[,1],model[,2],type="l",col="blue",ylab="Excess Demand",xlab="")
plot(model[,1],model[,4],type="l",col="red",ylab="Utility",xlab="")
source('~/GitHub/MSQF-Thesis/schmidt RK2.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/schmidt RK2.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/schmidt RK2.r')
source('~/GitHub/MSQF-Thesis/driver.r')
anc <- c(1.1,1,0.9)
w <- c(0.4,0.2,0.4)
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
?runif
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
source('~/GitHub/MSQF-Thesis/driver.r')
hist(model[,3])
hist(modela2[,3])
source('~/GitHub/MSQF-Thesis/driver.r')
swapArgs <- c("payerStrike"=800,"recStrike"=900,"volatility"=11)
swapArgs
swapArgs <- c("payerStrike"=800,"recStrike"=900,"volatility"=0.11)
swapArgs <- c("payerStrike"=800,"recStrike"=900,"volatility"=0.11)
log(2)
ln(2)
cos(1)
swapArgs$payerStrike
swapArgs[1]
swapArgs <- list(payerStrike=800,recStrike=900,volatility=0.11)
swapArgs$payerStrike
?dnorm
source('~/GitHub/swap-pricing/swap-pricing.r')
source('~/GitHub/swap-pricing/swap-pricing.r')
ra <- c(304.5,328.9,353.8,358.1,389.4,378.7,358.7,415.9,369.7,390,430.1,420.9,405.6,494.6)
t <- seq(0,78,6)
t
6*13
fra <- as.matrix(cbind(t,ra))
fra
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
source('~/GitHub/swap-pricing/swap-pricing.r')
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
source('~/GitHub/swap-pricing/swap-pricing.r')
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
source('~/GitHub/swap-pricing/swap-pricing.r')
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
source('~/GitHub/swap-pricing/swap-pricing.r')
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
source('~/GitHub/swap-pricing/swap-pricing.r')
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
source('~/GitHub/swap-pricing/swap-pricing.r')
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
source('~/GitHub/swap-pricing/swap-pricing.r')
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
source('~/GitHub/swap-pricing/swap-pricing.r')
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
source('~/GitHub/swap-pricing/swap-pricing.r')
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
dnorm(-0.2378565)
pnorm(-0.2378565)
source('~/GitHub/swap-pricing/swap-pricing.r')
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
source('~/GitHub/swap-pricing/swap-pricing.r')
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
source('~/GitHub/swap-pricing/swap-pricing.r')
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
source('~/GitHub/swap-pricing/swap-pricing.r')
source('~/GitHub/swap-pricing/swap-pricing.r')
source('~/GitHub/swap-pricing/swap-pricing.r')
swap(FRA=fra,notional=75000000,start=8,swaption=TRUE,swaptionArgs=swapArgs)
source('~/GitHub/swap-pricing/swap-pricing.r')
priceOption <- function(expT=6,s0=30.00,strike=30,rfr=0.1,vol=0.2,type='eu',steps=8,DY=0.0263)
{
stockTree <- matrix(0,steps+1,steps+1)
callTree <- matrix(0,steps+1,steps+1)
putTree <- matrix(0,steps+1,steps+1)
stepSize <- expT/(12*steps)
sizeUp <- exp(vol*sqrt(stepSize))
sizeDown <- 1/sizeUp
pU <- (exp((rfr-DY)*stepSize)-sizeDown)/(sizeUp-sizeDown)
pD <- 1-pU
stockTree[1,1] <- s0
bot <- 2
for(n in 2:(steps+1))
{
stockTree[bot,n] <- stockTree[bot-1,n-1]*sizeDown
for(k in (bot-1):1)
{
stockTree[k,n] <- stockTree[k,n-1]*sizeUp
}
bot <- bot + 1
}
for(i in 1:(steps+1))
{
callTree[i,steps+1] <- max(0,stockTree[i,steps+1]-strike)
putTree[i,steps+1] <- max(0,strike-stockTree[i,steps+1])
}
discount <- exp(-1*rfr*stepSize)
bot <- steps
for(n in steps:1)
{
for(k in bot:1)
{
if(type=='eu')
{
callTree[k,n] <- (callTree[k,n+1]*pU+callTree[k+1,n+1]*pD)*discount
putTree[k,n] <- (putTree[k,n+1]*pU+putTree[k+1,n+1]*pD)*discount
}
else if(type=='am')
{
callTree[k,n] <- max((callTree[k,n+1]*pU+callTree[k+1,n+1]*pD)*discount,stockTree[k,n]-strike)
putTree[k,n] <- max((putTree[k,n+1]*pU+putTree[k+1,n+1]*pD)*discount,strike-stockTree[k,n])
}
}
bot <- bot - 1
}
list(callPrice = callTree[1,1],putPrice = putTree[1,1],callTree = callTree,putTree=putTree)
}
priceOption()
?round
xx <- priceOption()
signif(xx$callPrice,4)
signif(xx$callPrice,3)
priceOption <- function(expT=6,s0=30.00,strike=30,rfr=0.1,vol=0.2,type='eu',steps=8,DY=0.0263)
{
stockTree <- matrix(0,steps+1,steps+1)
callTree <- matrix(0,steps+1,steps+1)
putTree <- matrix(0,steps+1,steps+1)
stepSize <- expT/(12*steps)
sizeUp <- exp(vol*sqrt(stepSize))
sizeDown <- 1/sizeUp
pU <- (exp((rfr-DY)*stepSize)-sizeDown)/(sizeUp-sizeDown)
pD <- 1-pU
stockTree[1,1] <- s0
bot <- 2
for(n in 2:(steps+1))
{
stockTree[bot,n] <- stockTree[bot-1,n-1]*sizeDown
for(k in (bot-1):1)
{
stockTree[k,n] <- stockTree[k,n-1]*sizeUp
}
bot <- bot + 1
}
for(i in 1:(steps+1))
{
callTree[i,steps+1] <- max(0,stockTree[i,steps+1]-strike)
putTree[i,steps+1] <- max(0,strike-stockTree[i,steps+1])
}
discount <- exp(-1*rfr*stepSize)
bot <- steps
for(n in steps:1)
{
for(k in bot:1)
{
if(type=='eu')
{
callTree[k,n] <- (callTree[k,n+1]*pU+callTree[k+1,n+1]*pD)*discount
putTree[k,n] <- (putTree[k,n+1]*pU+putTree[k+1,n+1]*pD)*discount
}
else if(type=='am')
{
callTree[k,n] <- max((callTree[k,n+1]*pU+callTree[k+1,n+1]*pD)*discount,stockTree[k,n]-strike)
putTree[k,n] <- max((putTree[k,n+1]*pU+putTree[k+1,n+1]*pD)*discount,strike-stockTree[k,n])
}
}
bot <- bot - 1
}
list(callPrice = signif(callTree[1,1],3),putPrice = signif(putTree[1,1],3),callTree = signif(callTree,3),putTree=signif(putTree,3))
}
xx <- priceOption()
xx
source('~/GitHub/option-pricing/option-pricing.r')
xx <- priceOption()
xx
source('~/GitHub/option-pricing/option-pricing.r')
xx <- priceOption()
xx
rnorm(10)
setwd("~/GitHub/simulating-growth-rates")
industry <- read.csv("~/GitHub/simulating-growth-rates/industry.csv", stringsAsFactors=FALSE)
View(industry)
CATprice <- read.csv("~/GitHub/simulating-growth-rates/CATprice.csv", stringsAsFactors=FALSE)
View(CATprice)
tbill <- read.csv("~/GitHub/simulating-growth-rates/tbill.csv", stringsAsFactors=FALSE)
View(tbill)
library("quantmod", lib.loc="~/R/win-library/3.1")
library("plyr", lib.loc="~/R/win-library/3.1")
monthlyReturn(industry[,2])
ind.xts <- as.xts(industry)
?as.xts
industry[,1] <- as.Date(industry[,1])
?format
industry[,1] <- as.Date(industry[,1], format = "%m/%d/%y")
View(industry)
rm(industry)
industry <- read.csv("~/GitHub/simulating-growth-rates/industry.csv", stringsAsFactors=FALSE)
View(industry)
ind.xts <- as.xts(industry)
ind2 <- industry
ind2$Date <- as.Date(ind2[,1])
ind2$Date <- as.Date(ind2[,1], format ="%m-%d-%yyyy")
typeof(ind2$Date)
typeof(ind2[1,1])
typeof(ind2[2,1])
ind.xts <- as.xts(industry)
?as.xts
ind.xts <- as.xts(industry[,-1], order.by=industry[,1])
ind.xts <- as.xts(industry[,-1], order.by=ind2[,1])
View(ind.xts)
rownames(ind.xts) <- ind2[,1]
View(ind.xts)
rownames(ind.xts) <- ind2[,1][1]
View(ind.xts)
rownames(ind.xts) <- ind2[[1]]
View(ind.xts)
rownames(ind.xts) <- ind2$Date
View(ind.xts)
rownames(ind2) <- ind2$Date
ind2$Date
ind2 <- industry
as.Date(ind2[,1], format="%m-%d-%y")
as.Date(ind2[,1])
as.Date(ind2[,1],format="%mm-%dd-%yyyy")
?as.Date
as.Date(ind2[,1], format="%m-%d-%Y")
rownames(ind2) <- as.Date(ind2[,1], format="%m-%d-%Y")
ind.xts <- as.xts(ind2[,-1])
monthlyReturn(ind.xts[,1])
m2 <- colwise(monthlyReturn)
tt <- m2(ind.xts)
tt <- m2(as.matrix(ind.xts))
tt <- m2(as.data.matrix(ind.xts))
tt <- m2(data.matrix(ind.xts))
tt <- m2(as.data.frame(ind.xts))
for(i in 1:ncol(ind.xts)){
if(i == 1){
ret <- monthlyReturn(ind.xts[,i])
}
else
{
merge(ret,monthlyReturn(ind.xts[,i]))
}
}
View(ret)
View(monthlyReturn(ind.xts[,1]))
for(i in 1:ncol(ind.xts)){
if(i == 1){
ret <- monthlyReturn(ind.xts[,i])
}
else
{
merge(ret,monthlyReturn(ind.xts[,i]))
}
}
View(ret)
monthlyReturn(ind.xts)
monthlyReturn(ind.xts[,2])
for(i in 1:ncol(ind.xts)){
if(i == 1){
ret <- monthlyReturn(ind.xts[,i])
}
else
{
cbind(ret,monthlyReturn(ind.xts[,i]))
}
}
View(ret)
ncol(ind.xts)
for(i in 1:ncol(ind.xts)){
if(i == 1){
ret <- monthlyReturn(ind.xts[,i])
}
else
{
ret <- cbind(ret,monthlyReturn(ind.xts[,i]))
}
}
View(ret)
names(ret) <- names(ind.xts)
for(i in 1:ncol(ind.xts)){
if(i == 1){
ind.ret <- monthlyReturn(ind.xts[,i])
}
else
{
ind.ret <- cbind(ind.ret,monthlyReturn(ind.xts[,i]))
}
}
names(ind.ret) <- names(ind.xts)
CAT.ret <- monthlyReturn(CAT.xts)
names(CAT.ret) <- names(CAT.xts)
rownames(CATprice) <- as.Date(CATprice[,1], format="%m-%d-%Y")
CAT.xts <- as.xts(CATprice[,-1])
for(i in 1:ncol(ind.xts)){
if(i == 1){
ind.ret <- monthlyReturn(ind.xts[,i])
}
else
{
ind.ret <- cbind(ind.ret,monthlyReturn(ind.xts[,i]))
}
}
names(ind.ret) <- names(ind.xts)
CAT.ret <- monthlyReturn(CAT.xts)
names(CAT.ret) <- names(CAT.xts)
View(CATprice)
industry <- read.csv("~/GitHub/simulating-growth-rates/industry.csv", stringsAsFactors=FALSE)
CATprice <- read.csv("~/GitHub/simulating-growth-rates/CATprice.csv", stringsAsFactors=FALSE)
tbill <- read.csv("~/GitHub/simulating-growth-rates/tbill.csv", stringsAsFactors=FALSE)
rownames(industry) <- as.Date(industry[,1], format="%m-%d-%Y")
ind.xts <- as.xts(industry[,-1])
rownames(CATprice) <- as.Date(CATprice[,1], format="%m-%d-%Y")
CAT.xts <- as.xts(CATprice[,-1])
for(i in 1:ncol(ind.xts)){
if(i == 1){
ind.ret <- monthlyReturn(ind.xts[,i])
}
else
{
ind.ret <- cbind(ind.ret,monthlyReturn(ind.xts[,i]))
}
}
names(ind.ret) <- names(ind.xts)
CAT.ret <- monthlyReturn(CAT.xts)
names(CAT.ret) <- names(CAT.xts)
View(CATprice)
View(industry)
View(CATprice[,-1])
CAT.xts <- as.xts(CATprice[,-1], order.by=rownames(CATprice))
CAT.xts <- as.xts(CATprice[,-1], order.by=CATprice[,1])
CATprice <- read.csv("~/GitHub/simulating-growth-rates/CATprice.csv", stringsAsFactors=FALSE)
CATprice[,1] <- as.Date(CATprice[,1], format="%m-%d-%Y")
CAT.xts <- as.xts(CATprice[,-1], order.by=CATprice[,1])
View(CAT.xts)
industry <- read.csv("~/GitHub/simulating-growth-rates/industry.csv", stringsAsFactors=FALSE)
CATprice <- read.csv("~/GitHub/simulating-growth-rates/CATprice.csv", stringsAsFactors=FALSE)
tbill <- read.csv("~/GitHub/simulating-growth-rates/tbill.csv", stringsAsFactors=FALSE)
industry[,1] <- as.Date(industry[,1], format="%m-%d-%Y")
ind.xts <- as.xts(industry[,-1], order.by=industry[,1])
CATprice[,1] <- as.Date(CATprice[,1], format="%m-%d-%Y")
CAT.xts <- as.xts(CATprice[,-1], order.by=CATprice[,1])
View(ind.xts)
View(CAT.xts)
names(CAT.xts) <- "CAT"
for(i in 1:ncol(ind.xts)){
if(i == 1){
ind.ret <- monthlyReturn(ind.xts[,i])
}
else
{
ind.ret <- cbind(ind.ret,monthlyReturn(ind.xts[,i]))
}
}
names(ind.ret) <- names(ind.xts)
CAT.ret <- monthlyReturn(CAT.xts)
names(CAT.ret) <- names(CAT.xts)
View(ind.xts)
View(CAT.ret)
noBM <- ind.ret[,-ncol(ind.ret)]
?ecdf
?epdf
??empirical distribution
library("fitdistrplus", lib.loc="~/R/win-library/3.1")
d <- fitdist(noBM[1,])
d <- descdist(noBM[1,])
d <- descdist(as.numeric(noBM[1,])
)
d$mean
d$sd
d$skew
d$kurt
plot(d)
plotdist(d)
install.packages("distr")
library("distr", lib.loc="~/R/win-library/3.1")
tt <- noBM[1,]
hist(tt)
tt <- as.numeric(noBM[1,])
hist(tt)
hist(tt)$density
hist(tt)$breaks
library("fitdistrplus", lib.loc="~/R/win-library/3.1")
fitdistr(as.numeric(tt),"norm")
fitdist(as.numeric(tt),"norm")
fitdist(as.numeric(tt),"norm")$loglik
fitdist(as.numeric(tt),"t")$loglik
fitdist(as.numeric(tt),"gamma")$loglik
d
plot(d)
plotdist(d)
descdist(tt)
descdist(tt, boot=1000)
descdist(tt, boot=100)
plot(dnorm(tt,mean=mean(tt),sd=sd(tt)))
plot(tt,dnorm(tt,mean=mean(tt),sd=sd(tt)))
plot(tt,pnorm(tt,mean=mean(tt),sd=sd(tt)))
plot(tt,dnorm(tt,mean=mean(tt),sd=sd(tt)))
plot(tt,CAT.xts[1]*dnorm(tt,mean=mean(tt),sd=sd(tt)))
plot(tt,CAT.ret[1]*dnorm(tt,mean=mean(tt),sd=sd(tt)))
dnorm(CAT.ret,mean=CAT.ret,sd=0)
dnorm(CAT.ret[1],mean=CAT.ret[1],sd=0)
dnorm(2,mean=2,sd=0)
dnorm(2,mean=2,sd=0.0000000000001)
?rnorm
dunif(as.numeric(CAT.ret[1]),min=-1,max=1)
r1 <- as.numeric(CAT.ret[1])
r1
ret1 <- as.numeric(noBM[1,])
dist1 <- dnorm(ret1,mean=mean(ret1),sd=sd(ret1))
r1c <- as.numeric(CAT.ret[1])
prior1 <- 0.5*dist1
prior1
hist(prior1)
plot(ret1,prior1)
?sample
samples <- sample(prior1,1000,replace=TRUE)
guess <- mean(samples)
hist(samples)
samples <- pnorm(sample(prior1,1000,replace=TRUE),mean=mean(prior1),sd=sd(prior1))
guess <- mean(samples)
hist(samples)
pnorm(0.1,mean=mean(prior1),sd=sd(prior1))
mean(prior1)
prior <- prior1/sum(prior1)
mean(prior)
prior1 <- 0.5*dist1/sum(dist1)
plot(ret1,prior)
samples <- pnorm(sample(prior1,1000,replace=TRUE),mean=mean(prior1),sd=sd(prior1))
guess <- mean(samples)
gues
guess
hist(samples)
samples <- pnorm(sample(prior1,1000,replace=TRUE),mean=mean(ret1),sd=sd(ret1))
guess <- mean(samples)
hist(samples)
guess
samples <- pnorm(sample(prior1,10000,replace=TRUE),mean=mean(ret1),sd=sd(ret1))
guess <- mean(samples)
guess
mean(ret1)
